<!--
  ant build file for cse 401 compiler project
  Robert R. Henry, 2014-01-02
  Running "ant build-example" will:
    compile the MiniJava compiler
    produce the log file    src/Parser/cup.out

    Run MiniJava to compile SamplePrograms/Example.java
    to assembly code        SamplePrograms/ExampleConst.s
    to executable file      SamplePrograms/ExampleConst.x

  And compiles, as needed to link into SamplePrograms/ExampleConst.x
    compile                 ./boot.c
    into                    ./boot.o
  -->

<!--
  Possible future changes:
    - use symbolic variables for various class and path names
    - add options to interface better with internal eclipse compiler
  -->

<project
  name="minijava" default="compile"
  xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks" 
  >

  <!--
    These are build targets for compiler.
    You might not need to change much of anything here except for compiler warnings
  -->

  <target name="init">
    <mkdir dir="build/classes" />
  </target>

  <target name="clean">
    <delete dir="build"/>
    <delete file="src/Parser/parser.java"/>
    <delete file="src/Parser/sym.java"/>
    <delete file="src/Scanner/scanner.java"/>
    <delete file="src/Scanner/scanner.java~"/>
    <delete file="./boot.o"/>
    <delete file="SamplePrograms/Example.o"/>
    <delete file="SamplePrograms/ExampleConst.o"/>
    <delete file="SamplePrograms/ExampleConst.s"/>
    <delete file="SamplePrograms/ExampleConst.x"/>
  </target>

  <target name="check.parse.files">
    <uptodate targetfile="src/Parser/parser.java"
	      srcfile="src/Parser/minijava.cup"
	      property="parser.uptodate"/>
    <uptodate targetfile="src/Scanner/scanner.java"
	      srcfile="src/Scanner/minijava.jflex"
	      property="scanner.uptodate"/>
    <condition property="scanner.parser.uptodate">
      <and>
	<isset property="scanner.uptodate"/>
	<isset property="parser.uptodate"/>
      </and>
    </condition>
  </target>

  <target
    name="gen-parser"
    depends="check.parse.files"
    unless="parser.uptodate">
    <java
      jar="lib/CUP.jar"
      fork="true"
      failonerror="true"
      output="src/Parser/cup.out"
      >
      <arg value="-dump_states"/>
      <arg value="-dump_grammar"/>
      <arg value="-dump_tables"/>
      <arg value="-destdir"/>
      <arg value="src/Parser"/>
      <arg value="src/Parser/minijava.cup"/>
    </java>
  </target>

  <target
    name="gen-scanner"
    depends="gen-parser, check.parse.files"
    unless="scanner.parser.uptodate"
    >
    <java
      classname="JFlex.Main"
      classpath="lib/JFlex.jar"
      fork="true"
      failonerror="true"
      >
      <arg value="src/Scanner/minijava.jflex"/>
    </java>
  </target>

  <!--
    Remove comment on the compilerarg line below to generate compiler warnings 
    for unchecked casts.  Even if the minijava code is clean, there will be
    warnings in java code generated by cup.
  -->
  <target name="compile" depends="init, gen-scanner">
    <javac
      srcdir="src"
      destdir="build/classes"
      classpath="lib/CUP.jar"
      debug="on"
      includeAntRuntime="false"
      >
      <!-- <compilerarg value="-Xlint:unchecked"/> -->
    </javac>
  </target>

  <!--
    Run scanner and parser test programs on initial demo input.
  -->
  <target name="test-scanner" depends="compile">
    <java
      classname="TestScanner"
      classpath="build/classes;lib/CUP.jar"
      fork="true"
      input="${file}"
      >
    </java>
  </target>

  <target name="test-parser" depends="compile">
    <java
      classname="TestParser"
      classpath="build/classes;lib/CUP.jar"
      fork="true"
      input="${file}"
      >
      <!--
      <arg value="-p"/>
      -->
      <arg value="-i"/>
      <arg value="SamplePrograms/ExampleConst.java"/>
      <arg value="-o"/>
      <arg value="SamplePrograms/ExampleConst.s"/>

    </java>
  </target>

  <target name="codegen" depends="compile">
    <java
      classname="CodeGenMain"
      classpath="build/classes;lib/CUP.jar"
      fork="true"
      >
      <arg value="-i"/>
      <arg value="${file}.java"/>
      <arg value="-o"/>
      <arg value="${file}.s"/>
      <arg value="-c"/>
    </java>
  </target>

  <target name="typecheck" depends="compile">
    <java
      classname="TypeChecker"
      classpath="build/classes;lib/CUP.jar"
      fork="true"
      input="${file}"
      >
    </java>
  </target>

  <!--
    Compile .c or .s files.
    See, perhaps;
      http://sourceforge.net/projects/ant-contrib/files/
      http://sourceforge.net/projects/ant-contrib/files/latest/download?source=files
      http://ant-contrib.sourceforge.net/cpptasks/antdocs/CCTask.html

    Do, perhaps:
      wget http://repo1.maven.org/maven2/ant-contrib/cpptasks/1.0b5/cpptasks-1.0b5.jar
      mkdir -p $HOME/.ant/lib
      cp cpptasks-1.0b5.jar $HOME/.ant/lib/cpptasks.jar

  -->

  <target name="build" depends="codegen">
    <cpptasks:cc
      name="gcc"
      outtype="executable"
      subsystem="console"
      outfile="${file}.x"
      debug="yes"
      objdir="./"
      >
      <linkerarg value="-lm" />
      <fileset dir="./" includes="boot.c number_converter.c" />
      <fileset dir="./" includes="${file}.s" />
    </cpptasks:cc>


  </target>

</project>
