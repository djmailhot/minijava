/*
 * Group cse401h
 * Jake Bailey, David Mailhot
 */

/*
 * CUP specification for the parser for a simple demo language.
 * Change this into the parser for your implementation of MiniJava.
 * CSE 401/P501 Au11.
 */

package Parser;

import AST.ASTNode;
import AST.ArrayAssign;
import AST.ArrayLength;
import AST.ArrayLookup;
import AST.Assign;
import AST.Block;
import AST.BooleanType;
import AST.Call;
import AST.ClassBody;
import AST.ClassDecl;
import AST.ClassDeclExtends;
import AST.ClassDeclList;
import AST.ClassDeclSimple;
import AST.ConstantExp;
import AST.Display;
import AST.Divide;
import AST.DoubleLiteral;
import AST.DoubleType;
import AST.Equal;
import AST.Exp;
import AST.ExpList;
import AST.False;
import AST.Formal;
import AST.FormalList;
import AST.GreaterEqual;
import AST.GreaterThan;
import AST.Identifier;
import AST.IdentifierExp;
import AST.IdentifierType;
import AST.If;
import AST.IntArrayType;
import AST.IntegerLiteral;
import AST.IntegerType;
import AST.LessEqual;
import AST.LessThan;
import AST.MainClass;
import AST.MethodBody;
import AST.MethodDecl;
import AST.MethodDeclList;
import AST.Minus;
import AST.Modulo;
import AST.NewArray;
import AST.NewObject;
import AST.Not;
import AST.NotEqual;
import AST.Plus;
import AST.Print;
import AST.Program;
import AST.ShortCircuitAnd;
import AST.ShortCircuitOr;
import AST.Statement;
import AST.StatementList;
import AST.This;
import AST.Times;
import AST.True;
import AST.Type;
import AST.VarDecl;
import AST.VarDeclList;
import AST.While;
import java_cup.runtime.Symbol;

import java.util.LinkedList;
import java.util.List;

/* Code in the following section is included in the generated parser */

parser code {:
  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message
   *  string and an additional object (to be used by specializations
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol) {
        if (((Symbol)info).left != -1) {
          System.err.println(" at line " + ((Symbol)info).left +
                             " of input");
        } else {
          System.err.println("");
        }
      } else {
        System.err.println("");
      }
    }
:};

/* end of code included in generated parser

/* Terminals (tokens returned by the scanner) */

/* reserved words: */
terminal PRINT;

terminal CLASS;
terminal EXTENDS;
terminal NEW;

terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal MAIN;
terminal STRING;

terminal INT;
terminal DOUBLE;
terminal BOOLEAN;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal RETURN;

terminal LENGTH;

terminal TRUE;
terminal FALSE;


/* operators: */
terminal EQUAL, NOTEQUAL, LESSTHAN, GREATERTHAN, LESSEQUAL, GREATEREQUAL;
terminal AND, OR;
terminal PLUS, MINUS, STAR, FSLASH, MOD, BECOMES, DOT, BANG;

/* delimiters: */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, SEMICOLON, COMMA;

/* tokens with values: */
terminal String IDENTIFIER;
terminal String INTLITERAL;
terminal String DOUBLELITERAL;

/* Nonterminals */

nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal ClassBody ClassBody;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodBody MethodBody;
nonterminal FormalList FormalList;
nonterminal Formal Formal;
nonterminal Type Type;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal ArrayAssign ArrayAssignStatement;
nonterminal Print PrintStatement;
nonterminal While WhileStatement;
nonterminal If IfStatement;
nonterminal ExpList ExpressionList;
nonterminal Exp Expression;
nonterminal Identifier Identifier;


/* Precedence declarations */

precedence left AND, OR;
precedence left EQUAL, NOTEQUAL, LESSTHAN, GREATERTHAN, LESSEQUAL, GREATEREQUAL;
precedence left BANG;
precedence left MOD;
precedence left PLUS, MINUS;
precedence left FSLASH, STAR;
precedence left DOT;


/* Productions */

Program ::=
          MainClass:m ClassDeclList:cl
            {: RESULT = new Program(m, cl, mleft); :}
          | MainClass:m
            {: RESULT = new Program(m, new ClassDeclList(mleft), mleft); :}
        ;

MainClass ::=
          CLASS Identifier:name LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier:args RPAREN LBRACE Statement:s RBRACE RBRACE
            {: RESULT = new MainClass(name, args, s, nameleft); :}
        ;

ClassDeclList ::=
          ClassDecl:c
            {:
              ClassDeclList cl = new ClassDeclList(cleft);
              cl.add(c);
              RESULT = cl;
            :}
          | ClassDeclList:cl ClassDecl:c
            {:
              cl.add(c);
              RESULT = cl;
            :}
        ;

ClassDecl ::=
          CLASS Identifier:name EXTENDS Identifier:parent ClassBody:cb
            {:
              RESULT = new ClassDeclExtends(name, parent, cb.vl, cb.ml, nameleft);
            :}
          |
          CLASS Identifier:name ClassBody:cb
            {:
              RESULT = new ClassDeclSimple(name, cb.vl, cb.ml, nameleft);
            :}
        ;

ClassBody ::=
          LBRACE:lb VarDeclList:vl MethodDeclList:ml RBRACE
            {:
              RESULT = new ClassBody(vl, ml, lbleft);
            :}
          | LBRACE:lb VarDeclList:vl RBRACE
            {:
              RESULT = new ClassBody(vl, new MethodDeclList(lbleft), lbleft);
            :}
          | LBRACE:lb MethodDeclList:ml RBRACE
            {:
              RESULT = new ClassBody(new VarDeclList(lbleft), ml, lbleft);
            :}
          | LBRACE:lb RBRACE
            {: 
              RESULT = new ClassBody(new VarDeclList(lbleft), new MethodDeclList(lbleft), lbleft);
            :}
        ;

VarDeclList ::=
          VarDecl:v
            {:
              VarDeclList vl = new VarDeclList(vleft);
              vl.add(v);
              RESULT = vl;
            :}
          | VarDeclList:vl VarDecl:v
            {:
              vl.add(v);
              RESULT = vl;
            :}
        ;

VarDecl ::=
          Type:t Identifier:id SEMICOLON
            {: RESULT = new VarDecl(t, id, tleft); :}
        ;

MethodDeclList ::=
          MethodDecl:m
            {:
              MethodDeclList ml = new MethodDeclList(mleft);
              ml.add(m);
              RESULT = ml;
            :}
          | MethodDeclList:ml MethodDecl:m
            {:
              ml.add(m);
              RESULT = ml;
            :}
        ;

MethodDecl ::=
          PUBLIC Type:t Identifier:id LPAREN FormalList:fl RPAREN MethodBody:mb
            {:
              RESULT = new MethodDecl(t, id, fl, mb.vl, mb.sl, mb.e, tleft);
            :}
          |
          PUBLIC Type:t Identifier:id LPAREN RPAREN MethodBody:mb
            {:
              RESULT = new MethodDecl(t, id, new FormalList(tleft), mb.vl, mb.sl, mb.e, tleft);
            :}
        ;

MethodBody ::=
          LBRACE:lb VarDeclList:vl StatementList:sl RETURN Expression:e SEMICOLON RBRACE
            {:
              RESULT = new MethodBody(vl, sl, e, lbleft);
            :}
          | LBRACE:lb VarDeclList:vl RETURN Expression:e SEMICOLON RBRACE
            {:
              RESULT = new MethodBody(vl, new StatementList(lbleft), e, lbleft);
            :}
          | LBRACE:lb StatementList:sl RETURN Expression:e SEMICOLON RBRACE
            {:
              RESULT = new MethodBody(new VarDeclList(lbleft), sl, e, lbleft);
            :}
          | LBRACE:lb RETURN Expression:e SEMICOLON RBRACE
            {:
              RESULT = new MethodBody(new VarDeclList(lbleft), new StatementList(lbleft), e, lbleft);
            :}
        ;

FormalList ::=
          Formal:f
            {:
              FormalList fl = new FormalList(fleft);
              fl.add(f);
              RESULT = fl;
            :}
          | FormalList:fl COMMA Formal:f
            {:
              fl.add(f);
              RESULT = fl;
            :}
        ;

Formal ::=
          Type:t Identifier:id
            {: RESULT = new Formal(t, id, tleft); :}
        ;

Type ::=
          INT:i
            {: RESULT = new IntegerType(ileft); :}
          | DOUBLE:d
            {: RESULT = new DoubleType(dleft); :}
          | BOOLEAN:b
            {: RESULT = new BooleanType(bleft); :}
          | INT LBRACKET RBRACKET:rb
            {: RESULT = new IntArrayType(rbleft); :}
          | IDENTIFIER:id
            {: RESULT = new IdentifierType(id, idleft); :}
        ;

StatementList ::=
          Statement:s
            {:
              StatementList sl = new StatementList(sleft);
              sl.add(s);
              RESULT = sl;
            :}
          | StatementList:sl Statement:s
            {:
              sl.add(s);
              RESULT = sl;
            :}
        ;

Statement   ::=
          AssignStatement:s
            {: RESULT = s; :}
          | ArrayAssignStatement:s
            {: RESULT = s; :}
          | PrintStatement:s
            {: RESULT = s; :}
          | WhileStatement:s
            {: RESULT = s; :}
          | IfStatement:s
            {: RESULT = s; :}
          | LBRACE StatementList:sl RBRACE
            {: RESULT = new Block(sl, slleft); :}
        ;

AssignStatement ::=
          Identifier:id BECOMES Expression:expr SEMICOLON
            {: RESULT = new Assign(id, expr, idleft); :}
        ;

PrintStatement ::=
          PRINT LPAREN Expression:e RPAREN SEMICOLON
            {: RESULT = new Print(e, eleft); :}
        ;

WhileStatement ::=
          WHILE LPAREN Expression:e RPAREN Statement:s
            {: RESULT = new While(e, s, sleft); :}
        ;

IfStatement ::=
          IF LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
            {: RESULT = new If(e, s1, s2, s2left); :}
        ;

ArrayAssignStatement ::=
          Identifier:id LBRACKET Expression:e1 RBRACKET BECOMES Expression:e2 SEMICOLON
            {: RESULT = new ArrayAssign(id, e1, e2, e2left); :}
        ;

Identifier  ::=
          IDENTIFIER:id
            {: RESULT = new Identifier(id, idleft); :}
        ;

ExpressionList ::=
          Expression:e
            {:
              ExpList el = new ExpList(eleft);
              el.add(e);
              RESULT = el;
            :}
          | ExpressionList:el COMMA Expression:e
            {:
              el.add(e);
              RESULT = el;
            :}
        ;

Expression    ::=
          IDENTIFIER:name
            {: RESULT = new IdentifierExp(name, nameleft); :}

        | TRUE:t
            {: RESULT = new True(tleft); :}

        | FALSE:f
            {: RESULT = new False(fleft); :}

        | INTLITERAL:value
            {: RESULT = new IntegerLiteral(value, valueleft); :}

        | DOUBLELITERAL:value
            {: RESULT = new DoubleLiteral(value, valueleft); :}

        | Expression:arg1 AND Expression:arg2
            {: RESULT = new ShortCircuitAnd(arg1, arg2, arg2left); :}

        | Expression:arg1 OR Expression:arg2
            {: RESULT = new ShortCircuitOr(arg1, arg2, arg2left); :}

        | BANG Expression:arg1
            {: RESULT = new Not(arg1, arg1left); :}

        | Expression:arg1 EQUAL Expression:arg2
            {: RESULT = new Equal(arg1, arg2, arg1left); :}

        | Expression:arg1 NOTEQUAL Expression:arg2
            {: RESULT = new NotEqual(arg1, arg2, arg1left); :}

        | Expression:arg1 LESSTHAN Expression:arg2
            {: RESULT = new LessThan(arg1, arg2, arg1left); :}

        | Expression:arg1 GREATERTHAN Expression:arg2
            {: RESULT = new GreaterThan(arg1, arg2, arg1left); :}

        | Expression:arg1 LESSEQUAL Expression:arg2
            {: RESULT = new LessEqual(arg1, arg2, arg1left); :}

        | Expression:arg1 GREATEREQUAL Expression:arg2
            {: RESULT = new GreaterEqual(arg1, arg2, arg1left); :}

        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1left); :}

        | Expression:arg1 MINUS Expression:arg2
            {: RESULT = new Minus(arg1, arg2, arg1left); :}

        | Expression:arg1 STAR Expression:arg2
            {: RESULT = new Times(arg1, arg2, arg1left); :}

        | Expression:arg1 FSLASH Expression:arg2
            {: RESULT = new Divide(arg1, arg2, arg1left); :}

        | Expression:arg1 MOD Expression:arg2
            {: RESULT = new Modulo(arg1, arg2, arg1left); :}

        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :}

        | NEW Identifier:id LPAREN RPAREN
            {: RESULT = new NewObject(id, idleft); :}

        | NEW INT LBRACKET Expression:e RBRACKET
            {: RESULT = new NewArray(e, eleft); :}

        | Expression:e DOT LENGTH
            {: RESULT = new ArrayLength(e, eleft); :}

        | Expression:e1 LBRACKET Expression:e2 RBRACKET
            {: RESULT = new ArrayLookup(e1, e2, e2left); :}

        | Expression:e DOT Identifier:id LPAREN ExpressionList:el RPAREN
            {: RESULT = new Call(e, id, el, eleft); :}

        | Expression:e DOT Identifier:id LPAREN RPAREN
            {: RESULT = new Call(e, id, new ExpList(idleft), eleft); :}
        ;
